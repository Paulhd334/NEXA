// /api/confirm-supabase-email.js - VERSION AM√âLIOR√âE
const SUPABASE_URL = 'https://itnrlxfbejgxbibezoup.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml0bnJseGZiZWpneGJpYmV6b3VwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA5NDgwODEsImV4cCI6MjA3NjUyNDA4MX0.0Ztl75n24jvOv0zGRvLSFGMmc0hQ3eoiZDwDrIrWKZ4';

export default async function handler(request, response) {
    console.log('üöÄ API confirm-supabase-email.js appel√©e - VERSION DEBUG');
    
    // CORS headers
    response.setHeader('Access-Control-Allow-Origin', '*');
    response.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS, GET');
    response.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

    // Handle preflight
    if (request.method === 'OPTIONS') {
        return response.status(200).end();
    }

    if (request.method !== 'POST') {
        return response.status(405).json({ 
            success: false,
            error: 'M√©thode non autoris√©e' 
        });
    }

    try {
        console.log('üì® Corps de la requ√™te re√ßu');
        const { email, token } = request.body;

        console.log('üéØ D√âBUT DEBUG COMPLET');
        console.log('üìß Email re√ßu:', email);
        console.log('üîê Token re√ßu:', token);
        console.log('üîê Type du token:', typeof token);
        console.log('üîê Longueur du token:', token?.length);

        // VALIDATION
        if (!email) {
            return response.status(400).json({ 
                success: false,
                error: 'Email requis' 
            });
        }

        if (!token) {
            return response.status(400).json({ 
                success: false,
                error: 'Token requis' 
            });
        }

        // D√âCODAGE BASE64 SI N√âCESSAIRE
        let actualToken = token;
        
        // M√©thode 1: V√©rifier si c'est du base64
        try {
            const decoded = Buffer.from(token, 'base64').toString('utf8');
            console.log('üîì Tentative de d√©codage base64:', decoded);
            
            // Si le d√©codage produit quelque chose de valide et diff√©rent de l'original
            if (decoded && decoded !== token && decoded.length > 0) {
                actualToken = decoded;
                console.log('‚úÖ Token d√©cod√© base64 avec succ√®s');
            }
        } catch (e) {
            console.log('‚ÑπÔ∏è Token non base64');
        }

        console.log('üéØ Token final utilis√©:', actualToken);
        console.log('üéØ Longueur token final:', actualToken.length);

        // 1. RECHERCHE DU TOKEN DANS LA BASE
        console.log('üîç Recherche du token dans Supabase...');
        
        const searchUrl = `${SUPABASE_URL}/rest/v1/user_confirmation_tokens?email=eq.${encodeURIComponent(email)}&confirmation_token=eq.${encodeURIComponent(actualToken)}&used=eq.false`;
        console.log('üîç URL de recherche:', searchUrl);

        const tokenCheck = await fetch(searchUrl, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'apikey': SUPABASE_ANON_KEY,
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
            }
        });

        console.log(`üìä Statut de la r√©ponse: ${tokenCheck.status}`);
        console.log(`üìä OK?: ${tokenCheck.ok}`);

        if (!tokenCheck.ok) {
            const errorText = await tokenCheck.text();
            console.error('‚ùå Erreur Supabase:', errorText);
            return response.status(500).json({
                success: false,
                error: 'Erreur de v√©rification du token',
                details: errorText
            });
        }

        const tokens = await tokenCheck.json();
        console.log(`üìã Nombre de tokens trouv√©s: ${tokens.length}`);

        if (tokens.length === 0) {
            console.log('‚ùå Aucun token valide trouv√©');
            
            // DEBUG: Rechercher tous les tokens pour cet email
            console.log('üîç DEBUG: Recherche de tous les tokens pour cet email...');
            const allTokensUrl = `${SUPABASE_URL}/rest/v1/user_confirmation_tokens?email=eq.${encodeURIComponent(email)}&select=*`;
            const allTokensResponse = await fetch(allTokensUrl, {
                headers: {
                    'Content-Type': 'application/json',
                    'apikey': SUPABASE_ANON_KEY,
                    'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
                }
            });
            
            if (allTokensResponse.ok) {
                const allTokens = await allTokensResponse.json();
                console.log('üîç Tous les tokens trouv√©s pour cet email:', allTokens);
            }
            
            return response.status(400).json({ 
                success: false,
                error: 'Token invalide, expir√© ou d√©j√† utilis√©' 
            });
        }

        const foundToken = tokens[0];
        console.log('‚úÖ Token valide trouv√©:', {
            id: foundToken.id,
            email: foundToken.email,
            token: foundToken.confirmation_token,
            expires_at: foundToken.expires_at,
            used: foundToken.used
        });

        // V√âRIFICATION EXPIRATION
        const now = new Date();
        const expiresAt = new Date(foundToken.expires_at);
        console.log('‚è∞ Date actuelle:', now.toISOString());
        console.log('‚è∞ Expiration token:', expiresAt.toISOString());
        console.log('‚è∞ Token expir√©?:', now > expiresAt);

        if (now > expiresAt) {
            console.log('‚ùå Token expir√©');
            return response.status(400).json({ 
                success: false,
                error: 'Token expir√©' 
            });
        }

        // MARQUER LE TOKEN COMME UTILIS√â
        console.log('üîÑ Marquage du token comme utilis√©...');
        const markUsedResponse = await fetch(
            `${SUPABASE_URL}/rest/v1/user_confirmation_tokens?id=eq.${foundToken.id}`,
            {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'apikey': SUPABASE_ANON_KEY,
                    'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
                    'Prefer': 'return=minimal'
                },
                body: JSON.stringify({
                    used: true,
                    used_at: now.toISOString()
                })
            }
        );

        if (!markUsedResponse.ok) {
            console.warn('‚ö†Ô∏è Impossible de marquer le token comme utilis√©');
        } else {
            console.log('‚úÖ Token marqu√© comme utilis√©');
        }

        console.log('üéâ CONFIRMATION R√âUSSIE!');
        
        return response.status(200).json({
            success: true,
            message: 'Email confirm√© avec succ√®s ! Votre compte est maintenant activ√©.',
            email: email,
            confirmed: true,
            timestamp: now.toISOString()
        });

    } catch (error) {
        console.error('‚ùå ERREUR CRITIQUE:', error);
        
        return response.status(500).json({
            success: false,
            error: 'Erreur serveur lors de la confirmation',
            details: error.message
        });
    }
}
